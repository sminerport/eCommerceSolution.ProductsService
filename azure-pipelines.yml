trigger:
  branches:
    include:
      - dev
      - qa
      - uat
      - staging
      - prod

resources:
  - repo: self

variables:
  - name: dockerRegistryServiceConnection
    value: "5aec3b45-85d9-420d-83b3-09b2c833e2dd"
  - name: imageRepository
    value: "products-microservice"
  - name: containerRegistry
    value: "microecommerceregistry.azurecr.io"
  - name: dockerfilePath
    value: "$(Build.SourcesDirectory)/ProductsMicroService.API/Dockerfile"
  - name: tag
    value: "$(Build.BuildId)"
  - name: linuxImageName
    value: "ubuntu-latest"
  - name: windowsImageName
    value: "windows-latest"
  - name: aksClusterName
    value: "ecommerce-aks-cluster"
  - name: qaAksServiceConnectionName
    value: "qa-ecommerce-aks-cluster-qa-1746262481292"
  - name: uatAksServiceConnectionName
    value: "uat-ecommerce-aks-cluster-uat-1746262574281"
  - name: stagingAksServiceConnectionName
    value: "staging-ecommerce-aks-cluster-staging-1746262651313"
  - name: prodAksServiceConnectionName
    value: "prod-ecommerce-aks-cluster-prod-1746262712232"

stages:
  - stage: Build
    displayName: Build and push stage
    jobs:
      - job: Build
        displayName: Docker Build
        pool:
          vmImage: $(linuxImageName)
        steps:
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
              buildContext: $(Build.SourcesDirectory)

  - stage: Test
    displayName: Test and publish results stage
    jobs:
      - job: RunTest
        displayName: Run Unit Tests
        pool:
          vmImage: $(windowsImageName)
        steps:
          - checkout: self
            displayName: Checkout source code
          - task: NuGetToolInstaller@1
            displayName: Install NuGetTool
          - task: NuGetCommand@2
            displayName: Restore NuGet Packages
            inputs:
              command: "restore"
              restoreSolution: "**/*.sln"
          - task: MSBuild@1
            displayName: Build solution
            inputs:
              solution: "**/*.sln"
              msbuildArchitecture: "x64"
              platform: "Any CPU"
              configuration: "Debug"
          - task: VSTest@3
            displayName: Test solution
            inputs:
              testSelector: "testAssemblies"
              testAssemblyVer2: |
                **\ProductsUnitTests.dll
                !**\*TestAdapter.dll
                !**\obj\**
              searchFolder: "$(System.DefaultWorkingDirectory)"
              runTestsInIsolation: true
              codeCoverageEnabled: true

- stage: DeployToDev
  displayName: Deploy to Dev
  dependsOn: Test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  variables:
    - group: products-microservice-dev
    - group: products-secrets-dev

  jobs:
  - deployment: DeploymentToDev
    displayName: Deploy to Dev Environment
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:

            - checkout: self

            # ─── 1) Create or update the mysql-credentials k8s Secret ───
            - task: Kubernetes@1
              displayName: Create/update mysql-credentials Secret
              inputs:
                kubernetesServiceEndpoint: $(kubernetes-service-connection-name)
                command: createSecretGeneric
                secretName: mysql-credentials
                secretType: generic
                arguments: |
                  --from-literal=DbName=$(DbName)
                  --from-literal=DbAdminUser=$(DbAdminUser)
                  --from-literal=DbAdminPassword=$(DbAdminPassword)
                  --from-literal=ConnectionStrings__DefaultConnection="$(DefaultConnection)"
                  --from-literal=RabbitMqUsername=$(RabbitMqUsername)
                  --from-literal=RabbitMqPassword=$(RabbitMqPassword)

            # ─── 2) Patch your image tags ─────────────────────────────
            - script: |
                find $(Build.SourcesDirectory)/k8s/dev \
                  -type f \( -name "*.yaml" -o -name "*.yml" \) \
                  -exec sed -i 's/__TAG__/$(tag)/g' {} +
              displayName: Replace __TAG__ in Manifests

            # ─── 3) Apply all the dev manifests ──────────────────────
            - task: Kubernetes@1
              displayName: Apply k8s/dev Manifests
              inputs:
                kubernetesServiceEndpoint: $(devAksServiceConnectionName)
                namespace: $(kubernetes-namespace)
                command: apply
                arguments: -f $(Build.SourcesDirectory)/k8s/dev

  - stage: DeployToQa
    displayName: Deploy to QA
    dependsOn: Test
    condition: and(succeeded('Build'), eq(variables['Build.SourceBranch'], 'refs/heads/qa'))
    variables:
    - group: products-microservice-qa
    jobs:
      - deployment: DeploymentToQa
        displayName: Deployment to QA Environment
        environment: qa
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: Checkout source code

                - script: |
                    echo "Listing contents of k8s"
                    ls -l $(Build.SourcesDirectory)/k8s/qa
                  displayName: "List Files in k8s QA Directory"

                - script: |
                    find $(Build.SourcesDirectory)/k8s/qa -type f \( -name "*.yaml" -o -name "*.yml" \) -exec sed -i 's/__TAG__/$(tag)/g' {} +
                  displayName: "Replace image tag in QA deployment file"

                - task: Kubernetes@1
                  displayName: Deploy to qa namespace in kubernetes
                  inputs:
                    kubernetesServiceEndpoint: $(qaAksServiceConnectionName)
                    kubernetesCluster: $(aksClusterName)
                    namespace: $(kubernetes-namespace)
                    command: apply
                    arguments: "-f $(Build.SourcesDirectory)/k8s/qa/."

  - stage: DeployToUat
    displayName: Deploy to Uat
    dependsOn: Test
    condition: and(succeeded('Build'), eq(variables['Build.SourceBranch'], 'refs/heads/uat'))
    variables:
    - group: products-microservice-uat
    jobs:
      - deployment: DeploymentToUat
        displayName: Deployment to UAT Environment
        environment: uat
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: Checkout source code

                - script: |
                    echo "Listing contents of k8s"
                    ls -l $(Build.SourcesDirectory)/k8s/uat
                  displayName: "List Files in k8s Directory"

                - script: |
                    find $(Build.SourcesDirectory)/k8s/uat -type f \( -name "*.yaml" -o -name "*.yml" \) -exec sed -i 's/__TAG__/$(tag)/g' {} +
                  displayName: "Replace image tag in UAT deployment file"

                - task: Kubernetes@1
                  displayName: Deploy to uat namespace in kubernetes
                  inputs:
                    kubernetesServiceEndpoint: $(uatAksServiceConnectionName)
                    kubernetesCluster: $(aksClusterName)
                    namespace: $(kubernetes-namespace)
                    command: apply
                    arguments: "-f $(Build.SourcesDirectory)/k8s/uat/."

  - stage: DeployToStaging
    displayName: Deploy to Staging
    dependsOn: Test
    condition: and(succeeded('Build'), eq(variables['Build.SourceBranch'], 'refs/heads/staging'))
    variables:
    - group: products-microservice-staging
    jobs:
      - deployment: DeploymentToStaging
        displayName: Deployment to Staging Environment
        environment: staging
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: Checkout source code

                - script: |
                    echo "Listing contents of k8s"
                    ls -l $(Build.SourcesDirectory)/k8s/staging
                  displayName: "List Files in k8s Staging Directory"

                - script: |
                    find $(Build.SourcesDirectory)/k8s/staging -type f \( -name "*.yaml" -o -name "*.yml" \) -exec sed -i 's/__TAG__/$(tag)/g' {} +
                  displayName: "Replace image tag in staging deployment file"

                - task: Kubernetes@1
                  displayName: Deploy to staging namespace in kubernetes
                  inputs:
                    kubernetesServiceEndpoint: $(stagingAksServiceConnectionName)
                    kubernetesCluster: $(aksClusterName)
                    namespace: $(kubernetes-namespace)
                    command: apply
                    arguments: "-f $(Build.SourcesDirectory)/k8s/staging/."

  - stage: DeployToProd
    displayName: Deploy to Production
    dependsOn: Test
    condition: and(succeeded('Build'), eq(variables['Build.SourceBranch'], 'refs/heads/prod'))
    variables:
    - group: products-microservice-prod
    jobs:
      - deployment: DeploymentToProduction
        displayName: Deployment to Production Environment
        environment: prod
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: Checkout source code

                - script: |
                    echo "Listing contents of k8s"
                    ls -l $(Build.SourcesDirectory)/k8s/prod
                  displayName: "List Files in k8s Directory"

                - script: |
                    find $(Build.SourcesDirectory)/k8s/prod -type f \( -name "*.yaml" -o -name "*.yml" \) -exec sed -i 's/__TAG__/$(tag)/g' {} +
                  displayName: "Replace image tag in prod deployment file"

                - task: Kubernetes@1
                  displayName: Deploy to production namespace in kubernetes
                  inputs:
                    kubernetesServiceEndpoint: $(prodAksServiceConnectionName)
                    kubernetesCluster: $(aksClusterName)
                    namespace: $(kubernetes-namespace)
                    command: apply
                    arguments: "-f $(Build.SourcesDirectory)/k8s/prod/."